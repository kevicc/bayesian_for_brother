# -*- coding: utf-8 -*-
"""bayesian_regression_brother.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KH8fw2Nc64KjPo7qzyO6jMVMBKZlMZFc
"""

# upload your file
from google.colab import files
uploaded = files.upload()

# upload a file
df = pd.read_csv("example.csv")
# check out your data
df.head(3)

# change the 'target' label to the name of the column you're predicting
X = df.drop(columns=['Target'])
y = df['Target']

# split test and train data
from sklearn.linear_model import BayesianRidge
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

stnd_scaler = StandardScaler()
X_scaled = stnd_scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled,y,test_size=0.2,
                                                    random_state=42)

# run grid search to make the mode
from sklearn.linear_model import BayesianRidge
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error

clf = BayesianRidge(fit_intercept=True)

pipe = Pipeline([('clf', clf)])
param_grid = {'clf__alpha_1': (1e-6,1e-5),
              'clf__alpha_2': (1e-6,1e-5),
              'clf__n_iter': (300,350)
              }
model = GridSearchCV(pipe,param_grid,cv=10,
                     scoring='neg_root_mean_squared_error')
model.fit(X_train,y_train)
print('Best parameters:', model.best_params_)

y_test_pred = model.predict(X_test)
y_test_pred_rmse = mean_squared_error(y_test,y_test_pred,squared=False)
print(f'RMSE of test data: {y_test_pred_rmse}')

# run after grid, change this to have the information printed above
finalmodel = BayesianRidge(fit_intercept=True, alpha_1=1e-05,alpha_2=1e-05,n_iter=300)

# get stats
finalmodel.fit(X_train,y_train)
print('Intercept:',finalmodel.intercept_)
print('Coefficients:', X.columns, finalmodel.coef_)

# predict on 20% hold out
visualize = pd.DataFrame(X_test)
visualize['predictions'] = model.predict(visualize)
visualize['actual'] = list(y_test)
visualize.head()

# see the output with your own eyes
visualize['predictions'].round().astype(int)
visualize[['predictions','actual']].plot()